{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pypeln \u00b6 Pypeln (pronounced as \"pypeline\") is a simple yet powerful python library for creating concurrent data pipelines. Simple : Pypeln was designed to solve medium data tasks that require parallelism and concurrency where using frameworks like Spark or Dask feels exaggerated or unnatural. Easy-to-use : Pypeln exposes a familiar functional API compatible with regular Python code. Flexible : Pypeln enables you to build pipelines using Processes, Threads and asyncio.Tasks via the exact same API. Fine-grained Control : Pypeln allows you to have control over the memory and cpu resources used at each stage of your pipelines. Installation \u00b6 Install Pypeln using pip: pip install pypeln Basic Usage \u00b6 With Pypeln you can easily create multi-stage data pipelines using 3 type of workers: Processes \u00b6 You can create a pipeline based on multiprocessing.Process workers by using the process module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . process . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously. Threads \u00b6 You can create a pipeline based on threading.Thread workers by using the thread module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . thread . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Here we have the exact same situation as in the previous case except that the worker are Threads. Tasks \u00b6 You can create a pipeline based on asyncio.Task workers by using the task module: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Conceptually similar but everything is running in a single thread and Task workers are created dynamically. Mixed Pipelines \u00b6 You can create pipelines using different worker types such that each type is the best for its given task so you can get the maximum performance out of your code: data = get_iterable () data = pl . task . map ( f1 , data , workers = 100 ) data = pl . thread . flat_map ( f2 , data , workers = 10 ) data = filter ( f3 , data ) data = pl . process . map ( f4 , data , workers = 5 , maxsize = 200 ) Notice that here we even used a regular python filter , since stages are iterables Pypeln integrates smoothly with any python code, just be aware of how each stage behaves. Pipe Operator \u00b6 In the spirit of being a true pipeline library, Pypeln also lets you create your pipelines using the pipe | operator: data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list ) Benchmarks \u00b6 Making an Unlimited Number of Requests with Python aiohttp + pypeln Code Related Stuff \u00b6 mpipe Process Pools Making 100 million requests with Python aiohttp Python multiprocessing Queue memory management Contributors \u00b6 cgarciae License \u00b6 MIT","title":"Introduction"},{"location":"#pypeln","text":"Pypeln (pronounced as \"pypeline\") is a simple yet powerful python library for creating concurrent data pipelines. Simple : Pypeln was designed to solve medium data tasks that require parallelism and concurrency where using frameworks like Spark or Dask feels exaggerated or unnatural. Easy-to-use : Pypeln exposes a familiar functional API compatible with regular Python code. Flexible : Pypeln enables you to build pipelines using Processes, Threads and asyncio.Tasks via the exact same API. Fine-grained Control : Pypeln allows you to have control over the memory and cpu resources used at each stage of your pipelines.","title":"Pypeln"},{"location":"#installation","text":"Install Pypeln using pip: pip install pypeln","title":"Installation"},{"location":"#basic-usage","text":"With Pypeln you can easily create multi-stage data pipelines using 3 type of workers:","title":"Basic Usage"},{"location":"#processes","text":"You can create a pipeline based on multiprocessing.Process workers by using the process module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . process . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously.","title":"Processes"},{"location":"#threads","text":"You can create a pipeline based on threading.Thread workers by using the thread module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . thread . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Here we have the exact same situation as in the previous case except that the worker are Threads.","title":"Threads"},{"location":"#tasks","text":"You can create a pipeline based on asyncio.Task workers by using the task module: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Conceptually similar but everything is running in a single thread and Task workers are created dynamically.","title":"Tasks"},{"location":"#mixed-pipelines","text":"You can create pipelines using different worker types such that each type is the best for its given task so you can get the maximum performance out of your code: data = get_iterable () data = pl . task . map ( f1 , data , workers = 100 ) data = pl . thread . flat_map ( f2 , data , workers = 10 ) data = filter ( f3 , data ) data = pl . process . map ( f4 , data , workers = 5 , maxsize = 200 ) Notice that here we even used a regular python filter , since stages are iterables Pypeln integrates smoothly with any python code, just be aware of how each stage behaves.","title":"Mixed Pipelines"},{"location":"#pipe-operator","text":"In the spirit of being a true pipeline library, Pypeln also lets you create your pipelines using the pipe | operator: data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list )","title":"Pipe Operator"},{"location":"#benchmarks","text":"Making an Unlimited Number of Requests with Python aiohttp + pypeln Code","title":"Benchmarks"},{"location":"#related-stuff","text":"mpipe Process Pools Making 100 million requests with Python aiohttp Python multiprocessing Queue memory management","title":"Related Stuff"},{"location":"#contributors","text":"cgarciae","title":"Contributors"},{"location":"#license","text":"MIT","title":"License"},{"location":"advanced/","text":"Advanced Usage \u00b6 Architecture \u00b6 A Pypeln pipeline has the following structure: Its composed of several concurrent stages At each stage it contains on or more worker entities that perform a task. Related stages are connected by a queue , workers from one stage put items into it, and workers from the other stage get items from it. Source stages consume iterables. Sink stages can be converted into iterables which consume them. Managing Resources \u00b6 Process and Thread \u00b6 Async Task \u00b6","title":"Advanced Usage"},{"location":"advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"advanced/#architecture","text":"A Pypeln pipeline has the following structure: Its composed of several concurrent stages At each stage it contains on or more worker entities that perform a task. Related stages are connected by a queue , workers from one stage put items into it, and workers from the other stage get items from it. Source stages consume iterables. Sink stages can be converted into iterables which consume them.","title":"Architecture"},{"location":"advanced/#managing-resources","text":"","title":"Managing Resources"},{"location":"advanced/#process-and-thread","text":"","title":"Process and Thread"},{"location":"advanced/#async-task","text":"","title":"Async Task"},{"location":"api/process/","text":"pl.process \u00b6 concat ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/process/api.py 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.process.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . process . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.process.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object. each ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None , run = False ) \u00b6 Show source code in pypeln/process/api.py 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.process.each(process_image, file_paths, workers = 4) pl.process.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.process.each(process_image, file_paths, workers = 4, run = True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> None`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `return = False` (default) it return a new stage, if `run = True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . process . each ( process_image , file_paths , workers = 4 ) pl . process . run ( stage ) or alternatively files_paths = get_file_paths () pl . process . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> None , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if return = False (default) it return a new stage, if run = True then it runs the stage and returns None . filter ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/process/api.py 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.filter(slow_gt3, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> bool`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> bool , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . flat_map ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/process/api.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.flat_map(slow_integer_pair, data, workers = 3, maxsize = 4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.process.map(f, stage) = pl.process.flat_map(lambda x: [f(x)], stage) pl.process.filter(f, stage) = pl.process.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x, **kwargs) -> Iterable`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . process . map ( f , stage ) = pl . process . flat_map ( lambda x : [ f ( x )], stage ) pl . process . filter ( f , stage ) = pl . process . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> Iterable , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . from_iterable ( iterable = Undefined , maxsize = None , worker_constructor =< class ' threading . Thread '>) \u00b6 Show source code in pypeln/process/api.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor ) ) return FromIterable ( iterable = iterable , f = None , worker_constructor = worker_constructor , workers = 1 , maxsize = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial . map ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/process/api.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.map(slow_add1, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> y`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> y , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"process"},{"location":"api/process/#plprocess","text":"","title":"pl.process"},{"location":"api/process/#pypeln.process.api.concat","text":"Show source code in pypeln/process/api.py 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.process.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . process . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.process.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object.","title":"concat()"},{"location":"api/process/#pypeln.process.api.each","text":"Show source code in pypeln/process/api.py 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.process.each(process_image, file_paths, workers = 4) pl.process.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.process.each(process_image, file_paths, workers = 4, run = True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> None`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `return = False` (default) it return a new stage, if `run = True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . process . each ( process_image , file_paths , workers = 4 ) pl . process . run ( stage ) or alternatively files_paths = get_file_paths () pl . process . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> None , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if return = False (default) it return a new stage, if run = True then it runs the stage and returns None .","title":"each()"},{"location":"api/process/#pypeln.process.api.filter","text":"Show source code in pypeln/process/api.py 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.filter(slow_gt3, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> bool`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> bool , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"filter()"},{"location":"api/process/#pypeln.process.api.flat_map","text":"Show source code in pypeln/process/api.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.flat_map(slow_integer_pair, data, workers = 3, maxsize = 4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.process.map(f, stage) = pl.process.flat_map(lambda x: [f(x)], stage) pl.process.filter(f, stage) = pl.process.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x, **kwargs) -> Iterable`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . process . map ( f , stage ) = pl . process . flat_map ( lambda x : [ f ( x )], stage ) pl . process . filter ( f , stage ) = pl . process . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> Iterable , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"flat_map()"},{"location":"api/process/#pypeln.process.api.from_iterable","text":"Show source code in pypeln/process/api.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor ) ) return FromIterable ( iterable = iterable , f = None , worker_constructor = worker_constructor , workers = 1 , maxsize = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial .","title":"from_iterable()"},{"location":"api/process/#pypeln.process.api.map","text":"Show source code in pypeln/process/api.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.map(slow_add1, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> y`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> y , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"map()"},{"location":"api/task/","text":"pl.task \u00b6 concat ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/task/api.py 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.task.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . task . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.task.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object. each ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None , run = False ) \u00b6 Show source code in pypeln/task/api.py 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.task.each(process_image, file_paths, workers = 4) pl.task.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.task.each(process_image, file_paths, workers = 4, run = True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> None`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `return = False` (default) it return a new stage, if `run = True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . task . each ( process_image , file_paths , workers = 4 ) pl . task . run ( stage ) or alternatively files_paths = get_file_paths () pl . task . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> None , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if return = False (default) it return a new stage, if run = True then it runs the stage and returns None . filter ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/task/api.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.filter(slow_gt3, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> bool`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> bool , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . flat_map ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/task/api.py 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.flat_map(slow_integer_pair, data, workers = 3, maxsize = 4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.task.map(f, stage) = pl.task.flat_map(lambda x: [f(x)], stage) pl.task.filter(f, stage) = pl.task.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x, **kwargs) -> Iterable`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . task . map ( f , stage ) = pl . task . flat_map ( lambda x : [ f ( x )], stage ) pl . task . filter ( f , stage ) = pl . task . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> Iterable , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . from_iterable ( iterable = Undefined , maxsize = None , worker_constructor =< class ' threading . Thread '>) \u00b6 Show source code in pypeln/task/api.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None ,) ) return FromIterable ( iterable = iterable , f = None , workers = 1 , maxsize = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial . map ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/task/api.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.map(slow_add1, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> y`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> y , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"task"},{"location":"api/task/#pltask","text":"","title":"pl.task"},{"location":"api/task/#pypeln.task.api.concat","text":"Show source code in pypeln/task/api.py 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.task.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . task . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.task.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object.","title":"concat()"},{"location":"api/task/#pypeln.task.api.each","text":"Show source code in pypeln/task/api.py 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.task.each(process_image, file_paths, workers = 4) pl.task.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.task.each(process_image, file_paths, workers = 4, run = True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> None`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `return = False` (default) it return a new stage, if `run = True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . task . each ( process_image , file_paths , workers = 4 ) pl . task . run ( stage ) or alternatively files_paths = get_file_paths () pl . task . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> None , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if return = False (default) it return a new stage, if run = True then it runs the stage and returns None .","title":"each()"},{"location":"api/task/#pypeln.task.api.filter","text":"Show source code in pypeln/task/api.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.filter(slow_gt3, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> bool`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> bool , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"filter()"},{"location":"api/task/#pypeln.task.api.flat_map","text":"Show source code in pypeln/task/api.py 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.flat_map(slow_integer_pair, data, workers = 3, maxsize = 4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.task.map(f, stage) = pl.task.flat_map(lambda x: [f(x)], stage) pl.task.filter(f, stage) = pl.task.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x, **kwargs) -> Iterable`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . task . map ( f , stage ) = pl . task . flat_map ( lambda x : [ f ( x )], stage ) pl . task . filter ( f , stage ) = pl . task . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> Iterable , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"flat_map()"},{"location":"api/task/#pypeln.task.api.from_iterable","text":"Show source code in pypeln/task/api.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None ,) ) return FromIterable ( iterable = iterable , f = None , workers = 1 , maxsize = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial .","title":"from_iterable()"},{"location":"api/task/#pypeln.task.api.map","text":"Show source code in pypeln/task/api.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.map(slow_add1, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> y`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> y , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"map()"},{"location":"api/thread/","text":"pl.thread \u00b6 concat ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/thread/api.py 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.thread.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . thread . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.thread.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object. each ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None , run = False ) \u00b6 Show source code in pypeln/thread/api.py 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.thread.each(process_image, file_paths, workers = 4) pl.thread.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.thread.each(process_image, file_paths, workers = 4, run = True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> None`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `return = False` (default) it return a new stage, if `run = True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . thread . each ( process_image , file_paths , workers = 4 ) pl . thread . run ( stage ) or alternatively files_paths = get_file_paths () pl . thread . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> None , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if return = False (default) it return a new stage, if run = True then it runs the stage and returns None . filter ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/thread/api.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.filter(slow_gt3, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> bool`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> bool , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . flat_map ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/thread/api.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.flat_map(slow_integer_pair, data, workers = 3, maxsize = 4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.thread.map(f, stage) = pl.thread.flat_map(lambda x: [f(x)], stage) pl.thread.filter(f, stage) = pl.thread.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x, **kwargs) -> Iterable`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . thread . map ( f , stage ) = pl . thread . flat_map ( lambda x : [ f ( x )], stage ) pl . thread . filter ( f , stage ) = pl . thread . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> Iterable , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . from_iterable ( iterable = Undefined , maxsize = None , worker_constructor =< class ' threading . Thread '>) \u00b6 Show source code in pypeln/thread/api.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor ) ) return FromIterable ( iterable = iterable , f = None , worker_constructor = worker_constructor , workers = 1 , maxsize = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial . map ( f , stage = Undefined , workers = 1 , maxsize = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/thread/api.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.map(slow_add1, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> y`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> y , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"thread"},{"location":"api/thread/#plthread","text":"","title":"pl.thread"},{"location":"api/thread/#pypeln.thread.api.concat","text":"Show source code in pypeln/thread/api.py 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.thread.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . thread . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.thread.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object.","title":"concat()"},{"location":"api/thread/#pypeln.thread.api.each","text":"Show source code in pypeln/thread/api.py 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.thread.each(process_image, file_paths, workers = 4) pl.thread.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.thread.each(process_image, file_paths, workers = 4, run = True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> None`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `return = False` (default) it return a new stage, if `run = True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . thread . each ( process_image , file_paths , workers = 4 ) pl . thread . run ( stage ) or alternatively files_paths = get_file_paths () pl . thread . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> None , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if return = False (default) it return a new stage, if run = True then it runs the stage and returns None .","title":"each()"},{"location":"api/thread/#pypeln.thread.api.filter","text":"Show source code in pypeln/thread/api.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.filter(slow_gt3, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> bool`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> bool , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"filter()"},{"location":"api/thread/#pypeln.thread.api.flat_map","text":"Show source code in pypeln/thread/api.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.flat_map(slow_integer_pair, data, workers = 3, maxsize = 4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.thread.map(f, stage) = pl.thread.flat_map(lambda x: [f(x)], stage) pl.thread.filter(f, stage) = pl.thread.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x, **kwargs) -> Iterable`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . thread . map ( f , stage ) = pl . thread . flat_map ( lambda x : [ f ( x )], stage ) pl . thread . filter ( f , stage ) = pl . thread . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> Iterable , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"flat_map()"},{"location":"api/thread/#pypeln.thread.api.from_iterable","text":"Show source code in pypeln/thread/api.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor ) ) return FromIterable ( iterable = iterable , f = None , worker_constructor = worker_constructor , workers = 1 , maxsize = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial .","title":"from_iterable()"},{"location":"api/thread/#pypeln.thread.api.map","text":"Show source code in pypeln/thread/api.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.map(slow_add1, data, workers = 3, maxsize = 4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x, **kwargs) -> y`, where `kwargs` is the return of `on_start` if present. stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs`, where `kwargs` can be a `dict` of keyword arguments that will be passed to `f` and `on_done`. If you define a `worker_info` argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. on_done: A function with signature `on_done(stage_status?, **kwargs)`, where `kwargs` is the return of `on_start` if present. If you define a `stage_status` argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x, **kwargs) -> y , where kwargs is the return of on_start if present. required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs , where kwargs can be a dict of keyword arguments that will be passed to f and on_done . If you define a worker_info argument an object with information about the worker will be passed. This function is executed once per worker at the beggining. None on_done Callable A function with signature on_done(stage_status?, **kwargs) , where kwargs is the return of on_start if present. If you define a stage_status argument an object with information about the stage will be passed. This function is executed once per worker when the worker finishes. None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"map()"}]}