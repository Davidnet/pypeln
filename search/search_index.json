{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pypeln \u00b6 Pypeln (pronounced as \"pypeline\") is a simple yet powerful Python library for creating concurrent data pipelines. Main Features \u00b6 Simple : Pypeln was designed to solve medium data tasks that require parallelism and concurrency where using frameworks like Spark or Dask feels exaggerated or unnatural. Easy-to-use : Pypeln exposes a familiar functional API compatible with regular Python code. Flexible : Pypeln enables you to build pipelines using Processes, Threads and asyncio.Tasks via the exact same API. Fine-grained Control : Pypeln allows you to have control over the memory and cpu resources used at each stage of your pipelines. For more information take a look at the Documentation . Installation \u00b6 Install Pypeln using pip: pip install pypeln Basic Usage \u00b6 With Pypeln you can easily create multi-stage data pipelines using 3 type of workers: Processes \u00b6 You can create a pipeline based on multiprocessing.Process workers by using the process module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . process . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously. Threads \u00b6 You can create a pipeline based on threading.Thread workers by using the thread module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . thread . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Here we have the exact same situation as in the previous case except that the worker are Threads. Tasks \u00b6 You can create a pipeline based on asyncio.Task workers by using the task module: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Conceptually similar but everything is running in a single thread and Task workers are created dynamically. Mixed Pipelines \u00b6 You can create pipelines using different worker types such that each type is the best for its given task so you can get the maximum performance out of your code: data = get_iterable () data = pl . task . map ( f1 , data , workers = 100 ) data = pl . thread . flat_map ( f2 , data , workers = 10 ) data = filter ( f3 , data ) data = pl . process . map ( f4 , data , workers = 5 , maxsize = 200 ) Notice that here we even used a regular python filter , since stages are iterables Pypeln integrates smoothly with any python code, just be aware of how each stage behaves. Pipe Operator \u00b6 In the spirit of being a true pipeline library, Pypeln also lets you create your pipelines using the pipe | operator: data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list ) Related Stuff \u00b6 Making an Unlimited Number of Requests with Python aiohttp + pypeln Process Pools Making 100 million requests with Python aiohttp Python multiprocessing Queue memory management joblib mpipe Contributors \u00b6 cgarciae License \u00b6 MIT","title":"Introduction"},{"location":"#pypeln","text":"Pypeln (pronounced as \"pypeline\") is a simple yet powerful Python library for creating concurrent data pipelines.","title":"Pypeln"},{"location":"#main-features","text":"Simple : Pypeln was designed to solve medium data tasks that require parallelism and concurrency where using frameworks like Spark or Dask feels exaggerated or unnatural. Easy-to-use : Pypeln exposes a familiar functional API compatible with regular Python code. Flexible : Pypeln enables you to build pipelines using Processes, Threads and asyncio.Tasks via the exact same API. Fine-grained Control : Pypeln allows you to have control over the memory and cpu resources used at each stage of your pipelines. For more information take a look at the Documentation .","title":"Main Features"},{"location":"#installation","text":"Install Pypeln using pip: pip install pypeln","title":"Installation"},{"location":"#basic-usage","text":"With Pypeln you can easily create multi-stage data pipelines using 3 type of workers:","title":"Basic Usage"},{"location":"#processes","text":"You can create a pipeline based on multiprocessing.Process workers by using the process module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . process . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously.","title":"Processes"},{"location":"#threads","text":"You can create a pipeline based on threading.Thread workers by using the thread module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . thread . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Here we have the exact same situation as in the previous case except that the worker are Threads.","title":"Threads"},{"location":"#tasks","text":"You can create a pipeline based on asyncio.Task workers by using the task module: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Conceptually similar but everything is running in a single thread and Task workers are created dynamically.","title":"Tasks"},{"location":"#mixed-pipelines","text":"You can create pipelines using different worker types such that each type is the best for its given task so you can get the maximum performance out of your code: data = get_iterable () data = pl . task . map ( f1 , data , workers = 100 ) data = pl . thread . flat_map ( f2 , data , workers = 10 ) data = filter ( f3 , data ) data = pl . process . map ( f4 , data , workers = 5 , maxsize = 200 ) Notice that here we even used a regular python filter , since stages are iterables Pypeln integrates smoothly with any python code, just be aware of how each stage behaves.","title":"Mixed Pipelines"},{"location":"#pipe-operator","text":"In the spirit of being a true pipeline library, Pypeln also lets you create your pipelines using the pipe | operator: data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list )","title":"Pipe Operator"},{"location":"#related-stuff","text":"Making an Unlimited Number of Requests with Python aiohttp + pypeln Process Pools Making 100 million requests with Python aiohttp Python multiprocessing Queue memory management joblib mpipe","title":"Related Stuff"},{"location":"#contributors","text":"cgarciae","title":"Contributors"},{"location":"#license","text":"MIT","title":"License"},{"location":"advanced/","text":"Advanced Usage \u00b6 Architecture \u00b6 A Pypeln pipeline has the following structure: Its composed of several concurrent stages At each stage it contains on or more worker entities that perform a task. Related stages are connected by a queue , workers from one stage put items into it, and workers from the other stage get items from it. Source stages consume iterables. Sink stages can be converted into iterables which consume them. Stage Types \u00b6 Pypeln has 3 types of stages, each stage has an associated worker and queue types: Stage Type Worker Queue pl.process.Stage multiprocessing.Process multiprocessing.Queue pl.thread.Stage threading.Thread queue.Queue pl.task.Stage asyncio.Task asyncio.Queue Depending on the type of stage you use the following characteristics will vary: memory management, concurrency, parallelism, inter-stage communication overhead, worker initialization overhead: Stage Type Memory Concurrency Parallelism Communication Overhead Initialization Overhead process independent cpu + IO cpu + IO high high thread shared only for IO only for IO none mid task shared optimized IO optimized IO none low Stages \u00b6 Stages are lazy iterable objects that only contain meta information about the computation, to actually execute a pipeline you can iterate over it using a for loop, calling list , pl.<module>.run , etc. For example: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) for x in stage : print ( x ) # e.g. 2, 1, 5, 6, 3, 4, 7, 8, 9, 10 This example uses pl.process but it works the same for all the other modules. Since pypeln implements the Iterable interface it becomes very intuitive to use and compatible with most other python code. Workers \u00b6 Each Stage defines a number of workers which can usually be controlled by the workers parameter on pypeln 's various functions. In general try not to create more workers than the number of cores you have on your machine or else they will end up fighting for resources, but this varies with the type of worker. The following table shows the relative cost in memory + cpu usage of creating each worker: Worker Memory + CPU Cost Process high Thread mid Task low General guidelines: Only use processes when you need to perform heavy CPU operations in pararallel such as image processing, data transformations, etc. When forking a Process all the memory is copied to the new process, intialization is slow, communications between processes is costly since python objects have to be serialized, but you effectly escape the GIL so you gain true parallelism. Threads are very good for doing syncronous IO tasks such as interacting with the OS and libraries that yet don't expose a async API. Tasks are highly optimized for asynchronous IO operations, they are super cheap to create since they are just regular python objects, and you can generally create them in higher quantities since the event loop manages them efficiently for you. Queues \u00b6 Worker communicate between each other through Queues . The maximum number of elements each Queue can hold is controlled by the maxsize parameter in pypeln 's various functions. By default this number is 0 which means there is no limit to the number of elements, however when maxsize is set it serves as a backpressure mechanism that prevents previous stages from pushing new elements to a Queue when it becomes full (reaches its maxsize ), these stages will stop their computation until space becomes available thus potentially preveting OutOfMemeory errors on the slower stages. The following table shows the relative communication cost between workers given the nature of their queues: Worker Communication Cost Process high Thread none Task none General guidelines: Communication between processes is costly since python objects have to be serialized, which has a considerable overhead when passing large objects such as numpy arrays, binary objects, etc. To avoid this overhead try only passing metadata information such as filepaths between processes. There is no overhead in communication between threads or tasks , since everything happens in-memory there is no serialization overhead. Resource Management \u00b6 There are many occasions where you need to create some resource objects (e.g. http or database sessions) that (for efficiency) are expected to last the whole span of each worker's life. To support and effectily manage the lifecycle of such objects most of pypeln s functions accept the on_start and on_done callbacks. When a worker is created its on_start function get called. This function can return a dictionary containing these resource objects which can be consumed as arguments (by name) on the f and on_end functions. For exmaple: import pypeln as pl def on_start (): return dict ( http_session = get_http_session (), db_session = get_db_session (), ) def f ( x , http_session , db_session ): # some logic return y def on_end ( http_session , db_session ): http_session . close () db_session . close () stage = pl . process . map ( f , stage , workers = 3 , on_start = on_start , on_end = on_end ) Dependency Injection \u00b6 Special Arguments worker_info : f , on_start and on_done can define a worker_info argument; an object with information about the worker will be passed. stage_status : on_end can define a stage_status argument; an object with information about the stage will be passed. element_index : f can define a element_index argument; a tuple representing the index of the element will be passed, this index represents the order of creation of the element on the original/source iterable and is the underlying mechanism by which the ordered operation is implemented. Usually it will be a tuple of a single element, but operations like flat_map add an additional index dimension in order to properly keep track of the order. User Defined Any element in the dictionary returned by on_start can be consumed as an argument by f and on_done . Asyncio Integration \u00b6 While you can consume task stages synchronously as you've seen, there are 2 ways to consume them using python async syntax: await \u00b6 You can call await con any task.Stage to get back the results of its computation: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 async def main () data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = await stage # e.g. [5, 6, 9, 4, 8, 10, 7] When calling await on a stage you will get back the same result if you called list on it with be big difference that you wont block the current thread while waiting for the computation to materialize. Note In this example you are responsible for running the main task in the event loop yourself. async for \u00b6 task Stages are asynchronous generators so you can iterate through them using async for to get access each new element as soon as it become available: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 async def main () data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) async for element in stage : pritn ( element ) # 5 6 9 4 8 10 7 When iterating a stage using async for you will get back the same result as if you called the normal for on it with be big difference that you wont block the current thread while waiting for the next element. Note In this example you are responsible for running the main task in the event loop yourself. Event Loop \u00b6 When you run a task stage synchronously the tasks run on pypeln 's own event loop, however, if you itegrate them with other async code via await or async for these tasks will run on the current loop defined by asyncio.get_event_loop() . Pipe Operator \u00b6 Most functions can return a Partial instead of a Stage if the stage argument is not given. These Partial s are callables that accept the missing stage parameter and call the computation. The following expressions are equivalent: pl.process.map(f, stage, **kwargs) <=> pl.process.map(f, **kwargs)(stage) Partial implements the pipe | operator as x | partial <=> partial(x) This allows pypeln to enable you to define your pipelines more fluently: from pypenl import process as pr data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list )","title":"Advanced Usage"},{"location":"advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"advanced/#architecture","text":"A Pypeln pipeline has the following structure: Its composed of several concurrent stages At each stage it contains on or more worker entities that perform a task. Related stages are connected by a queue , workers from one stage put items into it, and workers from the other stage get items from it. Source stages consume iterables. Sink stages can be converted into iterables which consume them.","title":"Architecture"},{"location":"advanced/#stage-types","text":"Pypeln has 3 types of stages, each stage has an associated worker and queue types: Stage Type Worker Queue pl.process.Stage multiprocessing.Process multiprocessing.Queue pl.thread.Stage threading.Thread queue.Queue pl.task.Stage asyncio.Task asyncio.Queue Depending on the type of stage you use the following characteristics will vary: memory management, concurrency, parallelism, inter-stage communication overhead, worker initialization overhead: Stage Type Memory Concurrency Parallelism Communication Overhead Initialization Overhead process independent cpu + IO cpu + IO high high thread shared only for IO only for IO none mid task shared optimized IO optimized IO none low","title":"Stage Types"},{"location":"advanced/#stages","text":"Stages are lazy iterable objects that only contain meta information about the computation, to actually execute a pipeline you can iterate over it using a for loop, calling list , pl.<module>.run , etc. For example: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) for x in stage : print ( x ) # e.g. 2, 1, 5, 6, 3, 4, 7, 8, 9, 10 This example uses pl.process but it works the same for all the other modules. Since pypeln implements the Iterable interface it becomes very intuitive to use and compatible with most other python code.","title":"Stages"},{"location":"advanced/#workers","text":"Each Stage defines a number of workers which can usually be controlled by the workers parameter on pypeln 's various functions. In general try not to create more workers than the number of cores you have on your machine or else they will end up fighting for resources, but this varies with the type of worker. The following table shows the relative cost in memory + cpu usage of creating each worker: Worker Memory + CPU Cost Process high Thread mid Task low General guidelines: Only use processes when you need to perform heavy CPU operations in pararallel such as image processing, data transformations, etc. When forking a Process all the memory is copied to the new process, intialization is slow, communications between processes is costly since python objects have to be serialized, but you effectly escape the GIL so you gain true parallelism. Threads are very good for doing syncronous IO tasks such as interacting with the OS and libraries that yet don't expose a async API. Tasks are highly optimized for asynchronous IO operations, they are super cheap to create since they are just regular python objects, and you can generally create them in higher quantities since the event loop manages them efficiently for you.","title":"Workers"},{"location":"advanced/#queues","text":"Worker communicate between each other through Queues . The maximum number of elements each Queue can hold is controlled by the maxsize parameter in pypeln 's various functions. By default this number is 0 which means there is no limit to the number of elements, however when maxsize is set it serves as a backpressure mechanism that prevents previous stages from pushing new elements to a Queue when it becomes full (reaches its maxsize ), these stages will stop their computation until space becomes available thus potentially preveting OutOfMemeory errors on the slower stages. The following table shows the relative communication cost between workers given the nature of their queues: Worker Communication Cost Process high Thread none Task none General guidelines: Communication between processes is costly since python objects have to be serialized, which has a considerable overhead when passing large objects such as numpy arrays, binary objects, etc. To avoid this overhead try only passing metadata information such as filepaths between processes. There is no overhead in communication between threads or tasks , since everything happens in-memory there is no serialization overhead.","title":"Queues"},{"location":"advanced/#resource-management","text":"There are many occasions where you need to create some resource objects (e.g. http or database sessions) that (for efficiency) are expected to last the whole span of each worker's life. To support and effectily manage the lifecycle of such objects most of pypeln s functions accept the on_start and on_done callbacks. When a worker is created its on_start function get called. This function can return a dictionary containing these resource objects which can be consumed as arguments (by name) on the f and on_end functions. For exmaple: import pypeln as pl def on_start (): return dict ( http_session = get_http_session (), db_session = get_db_session (), ) def f ( x , http_session , db_session ): # some logic return y def on_end ( http_session , db_session ): http_session . close () db_session . close () stage = pl . process . map ( f , stage , workers = 3 , on_start = on_start , on_end = on_end )","title":"Resource Management"},{"location":"advanced/#dependency-injection","text":"Special Arguments worker_info : f , on_start and on_done can define a worker_info argument; an object with information about the worker will be passed. stage_status : on_end can define a stage_status argument; an object with information about the stage will be passed. element_index : f can define a element_index argument; a tuple representing the index of the element will be passed, this index represents the order of creation of the element on the original/source iterable and is the underlying mechanism by which the ordered operation is implemented. Usually it will be a tuple of a single element, but operations like flat_map add an additional index dimension in order to properly keep track of the order. User Defined Any element in the dictionary returned by on_start can be consumed as an argument by f and on_done .","title":"Dependency Injection"},{"location":"advanced/#asyncio-integration","text":"While you can consume task stages synchronously as you've seen, there are 2 ways to consume them using python async syntax:","title":"Asyncio Integration"},{"location":"advanced/#await","text":"You can call await con any task.Stage to get back the results of its computation: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 async def main () data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = await stage # e.g. [5, 6, 9, 4, 8, 10, 7] When calling await on a stage you will get back the same result if you called list on it with be big difference that you wont block the current thread while waiting for the computation to materialize. Note In this example you are responsible for running the main task in the event loop yourself.","title":"await"},{"location":"advanced/#async-for","text":"task Stages are asynchronous generators so you can iterate through them using async for to get access each new element as soon as it become available: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 async def main () data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) async for element in stage : pritn ( element ) # 5 6 9 4 8 10 7 When iterating a stage using async for you will get back the same result as if you called the normal for on it with be big difference that you wont block the current thread while waiting for the next element. Note In this example you are responsible for running the main task in the event loop yourself.","title":"async for"},{"location":"advanced/#event-loop","text":"When you run a task stage synchronously the tasks run on pypeln 's own event loop, however, if you itegrate them with other async code via await or async for these tasks will run on the current loop defined by asyncio.get_event_loop() .","title":"Event Loop"},{"location":"advanced/#pipe-operator","text":"Most functions can return a Partial instead of a Stage if the stage argument is not given. These Partial s are callables that accept the missing stage parameter and call the computation. The following expressions are equivalent: pl.process.map(f, stage, **kwargs) <=> pl.process.map(f, **kwargs)(stage) Partial implements the pipe | operator as x | partial <=> partial(x) This allows pypeln to enable you to define your pipelines more fluently: from pypenl import process as pr data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list )","title":"Pipe Operator"},{"location":"api/process/","text":"pl.process \u00b6 The process module lets you create pipelines using objects from python's multiprocessing module according to Pypeln's general architecture . Use this module when you are in need of true parallelism for CPU heavy operations but be aware of its implications. concat ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/process/api.py 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.process.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . process . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.process.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object. each ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , run = False ) \u00b6 Show source code in pypeln/process/api.py 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.process.each(process_image, file_paths, workers=4) pl.process.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.process.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . process . each ( process_image , file_paths , workers = 4 ) pl . process . run ( stage ) or alternatively files_paths = get_file_paths () pl . process . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . filter ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/process/api.py 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . flat_map ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/process/api.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.process.map(f, stage) = pl.process.flat_map(lambda x: [f(x)], stage) pl.process.filter(f, stage) = pl.process.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . process . map ( f , stage ) = pl . process . flat_map ( lambda x : [ f ( x )], stage ) pl . process . filter ( f , stage ) = pl . process . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . from_iterable ( iterable = Undefined , maxsize = None , worker_constructor =< class ' threading . Thread '>) \u00b6 Show source code in pypeln/process/api.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor , ) ) return FromIterable ( iterable = iterable , f = None , worker_constructor = worker_constructor , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial . map ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/process/api.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . ordered ( stage = Undefined , maxsize = 0 ) \u00b6 Show source code in pypeln/process/api.py 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 def ordered ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 ) -> Stage : \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.process.map(slow_squared, stage, workers = 2) stage = pl.process.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : ordered ( stage , maxsize = maxsize )) stage = to_stage ( stage ) return Ordered ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = [ stage ], ) Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . process . map ( slow_squared , stage , workers = 2 ) stage = pl . process . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage If the stage parameters is given then this function returns an iterable, else it returns a Partial . run ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/process/api.py 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 def run ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.process.each(slow_fn, data, workers=6) # execute pipeline pl.process.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if isinstance ( stages , list ) and len ( stages ) == 0 : raise ValueError ( \"Expected at least 1 stage to run\" ) elif isinstance ( stages , list ): stage = concat ( stages , maxsize = maxsize ) else : stage = stages stage = to_iterable ( stage , maxsize = maxsize ) for _ in stages : pass Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . process . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . process . run ( stage ) Parameters Name Type Description Default stages List[pypeln.process.stage.Stage] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 to_iterable ( stage = Undefined , maxsize = 0 , return_index = False ) \u00b6 Show source code in pypeln/process/api.py 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 def to_iterable ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False ) -> typing . Iterable : \"\"\" Creates an iterable from a stage. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable Creates an iterable from a stage. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Iterable If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"process"},{"location":"api/process/#plprocess","text":"The process module lets you create pipelines using objects from python's multiprocessing module according to Pypeln's general architecture . Use this module when you are in need of true parallelism for CPU heavy operations but be aware of its implications.","title":"pl.process"},{"location":"api/process/#pypeln.process.api.concat","text":"Show source code in pypeln/process/api.py 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.process.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . process . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.process.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object.","title":"concat()"},{"location":"api/process/#pypeln.process.api.each","text":"Show source code in pypeln/process/api.py 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.process.each(process_image, file_paths, workers=4) pl.process.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.process.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . process . each ( process_image , file_paths , workers = 4 ) pl . process . run ( stage ) or alternatively files_paths = get_file_paths () pl . process . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None .","title":"each()"},{"location":"api/process/#pypeln.process.api.filter","text":"Show source code in pypeln/process/api.py 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"filter()"},{"location":"api/process/#pypeln.process.api.flat_map","text":"Show source code in pypeln/process/api.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.process.map(f, stage) = pl.process.flat_map(lambda x: [f(x)], stage) pl.process.filter(f, stage) = pl.process.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . process . map ( f , stage ) = pl . process . flat_map ( lambda x : [ f ( x )], stage ) pl . process . filter ( f , stage ) = pl . process . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"flat_map()"},{"location":"api/process/#pypeln.process.api.from_iterable","text":"Show source code in pypeln/process/api.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor , ) ) return FromIterable ( iterable = iterable , f = None , worker_constructor = worker_constructor , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial .","title":"from_iterable()"},{"location":"api/process/#pypeln.process.api.map","text":"Show source code in pypeln/process/api.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"map()"},{"location":"api/process/#pypeln.process.api.ordered","text":"Show source code in pypeln/process/api.py 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 def ordered ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 ) -> Stage : \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.process.map(slow_squared, stage, workers = 2) stage = pl.process.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : ordered ( stage , maxsize = maxsize )) stage = to_stage ( stage ) return Ordered ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = [ stage ], ) Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . process . map ( slow_squared , stage , workers = 2 ) stage = pl . process . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"ordered()"},{"location":"api/process/#pypeln.process.api.run","text":"Show source code in pypeln/process/api.py 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 def run ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.process.each(slow_fn, data, workers=6) # execute pipeline pl.process.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if isinstance ( stages , list ) and len ( stages ) == 0 : raise ValueError ( \"Expected at least 1 stage to run\" ) elif isinstance ( stages , list ): stage = concat ( stages , maxsize = maxsize ) else : stage = stages stage = to_iterable ( stage , maxsize = maxsize ) for _ in stages : pass Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . process . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . process . run ( stage ) Parameters Name Type Description Default stages List[pypeln.process.stage.Stage] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0","title":"run()"},{"location":"api/process/#pypeln.process.api.to_iterable","text":"Show source code in pypeln/process/api.py 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 def to_iterable ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False ) -> typing . Iterable : \"\"\" Creates an iterable from a stage. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable Creates an iterable from a stage. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Iterable If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"to_iterable()"},{"location":"api/sync/","text":"pl.task \u00b6 The sync module follows same API as the rest of the modules but runs the code synchronously using normal python generators. This module is intended to be used for debugging purposes as synchronous code tends to be easier to debug than concurrent code in Python (e.g. vscode's debugger doesn't work well (if at all) with the multiprocessing and threading modules). Common arguments such as workers and maxsize are accepted by this module's functions for API compatibility purposes but are ignored. concat ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/sync/api.py 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage in order, that is, it yields an element from the frist stage, then an element from the second stage and so on until it reaches the last stage and starts again. When a stage has no more elements its taken out of the process. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.sync.concat([stage_1, stage_2]) # [1, 4, 2, 5, 3, 6, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: This parameter is not used and only kept for API compatibility with the other modules. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , on_start = None , on_done = None , timeout = 0 , dependencies = stages ,) Concatenates / merges many stages into a single one by appending elements from each stage in order, that is, it yields an element from the frist stage, then an element from the second stage and so on until it reaches the last stage and starts again. When a stage has no more elements its taken out of the process. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . sync . concat ([ stage_1 , stage_2 ]) # [1, 4, 2, 5, 3, 6, 7] Parameters Name Type Description Default stages List[pypeln.sync.stage.Stage] a list of stages or iterables. required maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 Returns Type Description Stage A stage object. each ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , run = False ) \u00b6 Show source code in pypeln/sync/api.py 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.sync.each(process_image, file_paths, workers=4) pl.sync.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.sync.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , on_start = on_start , on_done = on_done , timeout = timeout , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . sync . each ( process_image , file_paths , workers = 4 ) pl . sync . run ( stage ) or alternatively files_paths = get_file_paths () pl . sync . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . filter ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/sync/api.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. exactly like python's built-in `filter` function. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # [3, 4, 5, ..., 9] ``` Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , on_start = on_start , on_done = on_done , timeout = timeout , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . exactly like python's built-in filter function. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # [3, 4, 5, ..., 9] Parameters Name Type Description Default f Callable A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . flat_map ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/sync/api.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.sync.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # [0, 1, -1, 2, -2, ..., 9, -9] ``` `flat_map` is a more general operation, you can actually implement `pypeln.sync.map` and `pypeln.sync.filter` with it, for example: ```python import pypeln as pl pl.sync.map(f, stage) = pl.sync.flat_map(lambda x: [f(x)], stage) pl.sync.filter(f, stage) = pl.sync.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , on_start = on_start , on_done = on_done , timeout = timeout , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.sync.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # [0, 1, -1, 2, -2, ..., 9, -9] flat_map is a more general operation, you can actually implement pypeln.sync.map and pypeln.sync.filter with it, for example: import pypeln as pl pl . sync . map ( f , stage ) = pl . sync . flat_map ( lambda x : [ f ( x )], stage ) pl . sync . filter ( f , stage ) = pl . sync . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . from_iterable ( iterable = Undefined , maxsize = None , worker_constructor = None ) \u00b6 Show source code in pypeln/sync/api.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = None , ) -> Stage : \"\"\" Creates a stage from an iterable. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: this parameter is not used and only kept for API compatibility with the other modules. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor ) ) return FromIterable ( iterable = iterable , f = None , timeout = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type this parameter is not used and only kept for API compatibility with the other modules. None Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial . map ( f , stage = Undefined , workers = None , maxsize = None , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/sync/api.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = None , maxsize : int = None , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its should behave exactly like python's built-in `map` function. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # [1, 2, 3, ..., 10] ``` Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , on_start = on_start , on_done = on_done , timeout = timeout , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its should behave exactly like python's built-in map function. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # [1, 2, 3, ..., 10] Parameters Name Type Description Default f Callable A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int This parameter is not used and only kept for API compatibility with the other modules. None maxsize int This parameter is not used and only kept for API compatibility with the other modules. None timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . ordered ( stage = Undefined , maxsize = 0 ) \u00b6 Show source code in pypeln/sync/api.py 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 def ordered ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 ) -> Stage : \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.thread.map(slow_squared, stage, workers = 2) stage = pl.sync.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` Since `sync.map` preserves order, instead we used `thread.map` so this example made sense. !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : ordered ( stage , maxsize = maxsize )) stage = to_stage ( stage ) return Ordered ( f = None , timeout = 0 , on_start = None , on_done = None , dependencies = [ stage ], ) Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . thread . map ( slow_squared , stage , workers = 2 ) stage = pl . sync . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Since sync.map preserves order, instead we used thread.map so this example made sense. Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage If the stage parameters is given then this function returns an iterable, else it returns a Partial . run ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/sync/api.py 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 def run ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.sync.each(slow_fn, data, workers=6) # execute pipeline pl.sync.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: This parameter is not used and only kept for API compatibility with the other modules. \"\"\" if isinstance ( stages , list ) and len ( stages ) == 0 : raise ValueError ( \"Expected at least 1 stage to run\" ) elif isinstance ( stages , list ): stage = concat ( stages , maxsize = maxsize ) else : stage = stages stage = to_iterable ( stage , maxsize = maxsize ) for _ in stages : pass Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . sync . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . sync . run ( stage ) Parameters Name Type Description Default stages List[pypeln.sync.stage.Stage] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. required maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 to_iterable ( stage = Undefined , maxsize = 0 , return_index = False ) \u00b6 Show source code in pypeln/sync/api.py 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 def to_iterable ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index = False , ) -> typing . Iterable : \"\"\" Creates an iterable from a stage. Arguments: stage: A stage object. maxsize: This parameter is not used and only kept for API compatibility with the other modules. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize , return_index = return_index ) ) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable Creates an iterable from a stage. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 Returns Type Description Iterable If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"sync"},{"location":"api/sync/#pltask","text":"The sync module follows same API as the rest of the modules but runs the code synchronously using normal python generators. This module is intended to be used for debugging purposes as synchronous code tends to be easier to debug than concurrent code in Python (e.g. vscode's debugger doesn't work well (if at all) with the multiprocessing and threading modules). Common arguments such as workers and maxsize are accepted by this module's functions for API compatibility purposes but are ignored.","title":"pl.task"},{"location":"api/sync/#pypeln.sync.api.concat","text":"Show source code in pypeln/sync/api.py 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage in order, that is, it yields an element from the frist stage, then an element from the second stage and so on until it reaches the last stage and starts again. When a stage has no more elements its taken out of the process. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.sync.concat([stage_1, stage_2]) # [1, 4, 2, 5, 3, 6, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: This parameter is not used and only kept for API compatibility with the other modules. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , on_start = None , on_done = None , timeout = 0 , dependencies = stages ,) Concatenates / merges many stages into a single one by appending elements from each stage in order, that is, it yields an element from the frist stage, then an element from the second stage and so on until it reaches the last stage and starts again. When a stage has no more elements its taken out of the process. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . sync . concat ([ stage_1 , stage_2 ]) # [1, 4, 2, 5, 3, 6, 7] Parameters Name Type Description Default stages List[pypeln.sync.stage.Stage] a list of stages or iterables. required maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 Returns Type Description Stage A stage object.","title":"concat()"},{"location":"api/sync/#pypeln.sync.api.each","text":"Show source code in pypeln/sync/api.py 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.sync.each(process_image, file_paths, workers=4) pl.sync.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.sync.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , on_start = on_start , on_done = on_done , timeout = timeout , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . sync . each ( process_image , file_paths , workers = 4 ) pl . sync . run ( stage ) or alternatively files_paths = get_file_paths () pl . sync . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None .","title":"each()"},{"location":"api/sync/#pypeln.sync.api.filter","text":"Show source code in pypeln/sync/api.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. exactly like python's built-in `filter` function. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # [3, 4, 5, ..., 9] ``` Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , on_start = on_start , on_done = on_done , timeout = timeout , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . exactly like python's built-in filter function. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # [3, 4, 5, ..., 9] Parameters Name Type Description Default f Callable A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"filter()"},{"location":"api/sync/#pypeln.sync.api.flat_map","text":"Show source code in pypeln/sync/api.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.sync.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # [0, 1, -1, 2, -2, ..., 9, -9] ``` `flat_map` is a more general operation, you can actually implement `pypeln.sync.map` and `pypeln.sync.filter` with it, for example: ```python import pypeln as pl pl.sync.map(f, stage) = pl.sync.flat_map(lambda x: [f(x)], stage) pl.sync.filter(f, stage) = pl.sync.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , on_start = on_start , on_done = on_done , timeout = timeout , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.sync.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # [0, 1, -1, 2, -2, ..., 9, -9] flat_map is a more general operation, you can actually implement pypeln.sync.map and pypeln.sync.filter with it, for example: import pypeln as pl pl . sync . map ( f , stage ) = pl . sync . flat_map ( lambda x : [ f ( x )], stage ) pl . sync . filter ( f , stage ) = pl . sync . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"flat_map()"},{"location":"api/sync/#pypeln.sync.api.from_iterable","text":"Show source code in pypeln/sync/api.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = None , ) -> Stage : \"\"\" Creates a stage from an iterable. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: this parameter is not used and only kept for API compatibility with the other modules. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor ) ) return FromIterable ( iterable = iterable , f = None , timeout = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type this parameter is not used and only kept for API compatibility with the other modules. None Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial .","title":"from_iterable()"},{"location":"api/sync/#pypeln.sync.api.map","text":"Show source code in pypeln/sync/api.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = None , maxsize : int = None , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its should behave exactly like python's built-in `map` function. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # [1, 2, 3, ..., 10] ``` Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , on_start = on_start , on_done = on_done , timeout = timeout , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its should behave exactly like python's built-in map function. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # [1, 2, 3, ..., 10] Parameters Name Type Description Default f Callable A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int This parameter is not used and only kept for API compatibility with the other modules. None maxsize int This parameter is not used and only kept for API compatibility with the other modules. None timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"map()"},{"location":"api/sync/#pypeln.sync.api.ordered","text":"Show source code in pypeln/sync/api.py 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 def ordered ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 ) -> Stage : \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.thread.map(slow_squared, stage, workers = 2) stage = pl.sync.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` Since `sync.map` preserves order, instead we used `thread.map` so this example made sense. !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : ordered ( stage , maxsize = maxsize )) stage = to_stage ( stage ) return Ordered ( f = None , timeout = 0 , on_start = None , on_done = None , dependencies = [ stage ], ) Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . thread . map ( slow_squared , stage , workers = 2 ) stage = pl . sync . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Since sync.map preserves order, instead we used thread.map so this example made sense. Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"ordered()"},{"location":"api/sync/#pypeln.sync.api.run","text":"Show source code in pypeln/sync/api.py 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 def run ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.sync.each(slow_fn, data, workers=6) # execute pipeline pl.sync.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: This parameter is not used and only kept for API compatibility with the other modules. \"\"\" if isinstance ( stages , list ) and len ( stages ) == 0 : raise ValueError ( \"Expected at least 1 stage to run\" ) elif isinstance ( stages , list ): stage = concat ( stages , maxsize = maxsize ) else : stage = stages stage = to_iterable ( stage , maxsize = maxsize ) for _ in stages : pass Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . sync . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . sync . run ( stage ) Parameters Name Type Description Default stages List[pypeln.sync.stage.Stage] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. required maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0","title":"run()"},{"location":"api/sync/#pypeln.sync.api.to_iterable","text":"Show source code in pypeln/sync/api.py 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 def to_iterable ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index = False , ) -> typing . Iterable : \"\"\" Creates an iterable from a stage. Arguments: stage: A stage object. maxsize: This parameter is not used and only kept for API compatibility with the other modules. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize , return_index = return_index ) ) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable Creates an iterable from a stage. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 Returns Type Description Iterable If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"to_iterable()"},{"location":"api/task/","text":"pl.task \u00b6 The task module lets you create pipelines using objects from python's asyncio module according to Pypeln's general architecture . Use this module when you are in need to perform efficient asynchronous IO operations and DONT need to perform heavy CPU operations. concat ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/task/api.py 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.task.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . task . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.task.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object. each ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , run = False ) \u00b6 Show source code in pypeln/task/api.py 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl async def process_image(image_path): image = await load_image(image_path) image = await transform_image(image) await save_image(image_path, image) files_paths = get_file_paths() stage = pl.task.each(process_image, file_paths, workers=4) pl.task.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.task.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `async? f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl async def process_image ( image_path ): image = await load_image ( image_path ) image = await transform_image ( image ) await save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . task . each ( process_image , file_paths , workers = 4 ) pl . task . run ( stage ) or alternatively files_paths = get_file_paths () pl . task . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature async? f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . filter ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/task/api.py 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import asyncio from random import random async def slow_gt3(x): await asyncio.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `async? f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import asyncio from random import random async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature async? f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . flat_map ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/task/api.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.task.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import asyncio from random import random async def slow_integer_pair(x): await asyncio.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.task.map` and `pypeln.task.filter` with it, for example: ```python import pypeln as pl pl.task.map(f, stage) = pl.task.flat_map(lambda x: [f(x)], stage) pl.task.filter(f, stage) = pl.task.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `async? f(x) -> iterable`, it can also be an [async generator](https://www.python.org/dev/peps/pep-0525/#id8). `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.task.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import asyncio from random import random async def slow_integer_pair ( x ): await asyncio . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.task.map and pypeln.task.filter with it, for example: import pypeln as pl pl . task . map ( f , stage ) = pl . task . flat_map ( lambda x : [ f ( x )], stage ) pl . task . filter ( f , stage ) = pl . task . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature async? f(x) -> iterable , it can also be an async generator . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . from_iterable ( iterable = Undefined , maxsize = None , worker_constructor =< class ' threading . Thread '>) \u00b6 Show source code in pypeln/task/api.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None ,) ) return FromIterable ( iterable = iterable , f = None , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial . map ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/task/api.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import asyncio from random import random async def slow_add1(x): await asyncio.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `async? f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with the signature async? f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . ordered ( stage = Undefined , maxsize = 0 ) \u00b6 Show source code in pypeln/task/api.py 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 def ordered ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 ) -> Stage : \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import asyncio async def slow_squared(x): await asyncio.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.task.map(slow_squared, stage, workers = 2) stage = pl.task.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : ordered ( stage , maxsize = maxsize )) stage = to_stage ( stage ) return Ordered ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = [ stage ], ) Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import asyncio async def slow_squared ( x ): await asyncio . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . task . map ( slow_squared , stage , workers = 2 ) stage = pl . task . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage If the stage parameters is given then this function returns an iterable, else it returns a Partial . run ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/task/api.py 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 def run ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.task.each(slow_fn, data, workers=6) # execute pipeline pl.task.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if isinstance ( stages , list ) and len ( stages ) == 0 : raise ValueError ( \"Expected at least 1 stage to run\" ) elif isinstance ( stages , list ): stage = concat ( stages , maxsize = maxsize ) else : stage = stages stage = to_iterable ( stage , maxsize = maxsize ) for _ in stages : pass Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . task . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . task . run ( stage ) Parameters Name Type Description Default stages List[pypeln.task.stage.Stage] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 to_iterable ( stage = Undefined , maxsize = 0 , return_index = False ) \u00b6 Show source code in pypeln/task/api.py 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 def to_iterable ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False ) -> typing . Iterable : \"\"\" Creates an iterable from a stage. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize , return_index = return_index ) ) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable Creates an iterable from a stage. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Iterable If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"task"},{"location":"api/task/#pltask","text":"The task module lets you create pipelines using objects from python's asyncio module according to Pypeln's general architecture . Use this module when you are in need to perform efficient asynchronous IO operations and DONT need to perform heavy CPU operations.","title":"pl.task"},{"location":"api/task/#pypeln.task.api.concat","text":"Show source code in pypeln/task/api.py 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.task.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . task . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.task.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object.","title":"concat()"},{"location":"api/task/#pypeln.task.api.each","text":"Show source code in pypeln/task/api.py 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl async def process_image(image_path): image = await load_image(image_path) image = await transform_image(image) await save_image(image_path, image) files_paths = get_file_paths() stage = pl.task.each(process_image, file_paths, workers=4) pl.task.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.task.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `async? f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl async def process_image ( image_path ): image = await load_image ( image_path ) image = await transform_image ( image ) await save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . task . each ( process_image , file_paths , workers = 4 ) pl . task . run ( stage ) or alternatively files_paths = get_file_paths () pl . task . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature async? f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None .","title":"each()"},{"location":"api/task/#pypeln.task.api.filter","text":"Show source code in pypeln/task/api.py 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import asyncio from random import random async def slow_gt3(x): await asyncio.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `async? f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import asyncio from random import random async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature async? f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"filter()"},{"location":"api/task/#pypeln.task.api.flat_map","text":"Show source code in pypeln/task/api.py 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.task.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import asyncio from random import random async def slow_integer_pair(x): await asyncio.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.task.map` and `pypeln.task.filter` with it, for example: ```python import pypeln as pl pl.task.map(f, stage) = pl.task.flat_map(lambda x: [f(x)], stage) pl.task.filter(f, stage) = pl.task.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `async? f(x) -> iterable`, it can also be an [async generator](https://www.python.org/dev/peps/pep-0525/#id8). `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.task.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import asyncio from random import random async def slow_integer_pair ( x ): await asyncio . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.task.map and pypeln.task.filter with it, for example: import pypeln as pl pl . task . map ( f , stage ) = pl . task . flat_map ( lambda x : [ f ( x )], stage ) pl . task . filter ( f , stage ) = pl . task . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature async? f(x) -> iterable , it can also be an async generator . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"flat_map()"},{"location":"api/task/#pypeln.task.api.from_iterable","text":"Show source code in pypeln/task/api.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None ,) ) return FromIterable ( iterable = iterable , f = None , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial .","title":"from_iterable()"},{"location":"api/task/#pypeln.task.api.map","text":"Show source code in pypeln/task/api.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import asyncio from random import random async def slow_add1(x): await asyncio.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.task.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `async? f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with the signature async? f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"map()"},{"location":"api/task/#pypeln.task.api.ordered","text":"Show source code in pypeln/task/api.py 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 def ordered ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 ) -> Stage : \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import asyncio async def slow_squared(x): await asyncio.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.task.map(slow_squared, stage, workers = 2) stage = pl.task.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : ordered ( stage , maxsize = maxsize )) stage = to_stage ( stage ) return Ordered ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = [ stage ], ) Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import asyncio async def slow_squared ( x ): await asyncio . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . task . map ( slow_squared , stage , workers = 2 ) stage = pl . task . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"ordered()"},{"location":"api/task/#pypeln.task.api.run","text":"Show source code in pypeln/task/api.py 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 def run ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.task.each(slow_fn, data, workers=6) # execute pipeline pl.task.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if isinstance ( stages , list ) and len ( stages ) == 0 : raise ValueError ( \"Expected at least 1 stage to run\" ) elif isinstance ( stages , list ): stage = concat ( stages , maxsize = maxsize ) else : stage = stages stage = to_iterable ( stage , maxsize = maxsize ) for _ in stages : pass Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . task . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . task . run ( stage ) Parameters Name Type Description Default stages List[pypeln.task.stage.Stage] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0","title":"run()"},{"location":"api/task/#pypeln.task.api.to_iterable","text":"Show source code in pypeln/task/api.py 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 def to_iterable ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False ) -> typing . Iterable : \"\"\" Creates an iterable from a stage. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize , return_index = return_index ) ) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable Creates an iterable from a stage. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Iterable If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"to_iterable()"},{"location":"api/thread/","text":"pl.thread \u00b6 The thread module lets you create pipelines using objects from python's threading module according to Pypeln's general architecture . Use this module when you are in need to perform some synchronous IO operations and DONT need to perform heavy CPU operations. concat ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/thread/api.py 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.thread.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . thread . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.thread.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object. each ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , run = False ) \u00b6 Show source code in pypeln/thread/api.py 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.thread.each(process_image, file_paths, workers=4) pl.thread.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.thread.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . thread . each ( process_image , file_paths , workers = 4 ) pl . thread . run ( stage ) or alternatively files_paths = get_file_paths () pl . thread . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . filter ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/thread/api.py 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . flat_map ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/thread/api.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.thread.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.thread.map` and `pypeln.thread.filter` with it, for example: ```python import pypeln as pl pl.thread.map(f, stage) = pl.thread.flat_map(lambda x: [f(x)], stage) pl.thread.filter(f, stage) = pl.thread.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.thread.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.thread.map and pypeln.thread.filter with it, for example: import pypeln as pl pl . thread . map ( f , stage ) = pl . thread . flat_map ( lambda x : [ f ( x )], stage ) pl . thread . filter ( f , stage ) = pl . thread . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . from_iterable ( iterable = Undefined , maxsize = None , worker_constructor =< class ' threading . Thread '>) \u00b6 Show source code in pypeln/thread/api.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor ) ) return FromIterable ( iterable = iterable , f = None , worker_constructor = worker_constructor , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial . map ( f , stage = Undefined , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None ) \u00b6 Show source code in pypeln/thread/api.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with the signature f(x) -> y . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial . ordered ( stage = Undefined , maxsize = 0 ) \u00b6 Show source code in pypeln/thread/api.py 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 def ordered ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 ) -> Stage : \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.thread.map(slow_squared, stage, workers = 2) stage = pl.thread.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : ordered ( stage , maxsize = maxsize )) stage = to_stage ( stage ) return Ordered ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = [ stage ], ) Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . thread . map ( slow_squared , stage , workers = 2 ) stage = pl . thread . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage If the stage parameters is given then this function returns an iterable, else it returns a Partial . run ( stages , maxsize = 0 ) \u00b6 Show source code in pypeln/thread/api.py 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 def run ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.thread.each(slow_fn, data, workers=6) # execute pipeline pl.thread.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if isinstance ( stages , list ) and len ( stages ) == 0 : raise ValueError ( \"Expected at least 1 stage to run\" ) elif isinstance ( stages , list ): stage = concat ( stages , maxsize = maxsize ) else : stage = stages stage = to_iterable ( stage , maxsize = maxsize ) for _ in stages : pass Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . thread . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . thread . run ( stage ) Parameters Name Type Description Default stages List[pypeln.thread.stage.Stage] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 to_iterable ( stage = Undefined , maxsize = 0 , return_index = False ) \u00b6 Show source code in pypeln/thread/api.py 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 def to_iterable ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False ) -> typing . Iterable : \"\"\" Creates an iterable from a stage. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable Creates an iterable from a stage. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Iterable If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"thread"},{"location":"api/thread/#plthread","text":"The thread module lets you create pipelines using objects from python's threading module according to Pypeln's general architecture . Use this module when you are in need to perform some synchronous IO operations and DONT need to perform heavy CPU operations.","title":"pl.thread"},{"location":"api/thread/#pypeln.thread.api.concat","text":"Show source code in pypeln/thread/api.py 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 def concat ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.thread.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: a list of stages or iterables. maxsize: the maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" stages = [ to_stage ( stage ) for stage in stages ] return Concat ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = stages , ) Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . thread . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters Name Type Description Default stages List[pypeln.thread.stage.Stage] a list of stages or iterables. required maxsize int the maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage A stage object.","title":"concat()"},{"location":"api/thread/#pypeln.thread.api.each","text":"Show source code in pypeln/thread/api.py 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 def each ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , run : bool = False , ) -> Stage : \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.thread.each(process_image, file_paths, workers=4) pl.thread.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.thread.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) stage = Each ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) if not run : return stage for _ in stage : pass Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . thread . each ( process_image , file_paths , workers = 4 ) pl . thread . run ( stage ) or alternatively files_paths = get_file_paths () pl . thread . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None .","title":"each()"},{"location":"api/thread/#pypeln.thread.api.filter","text":"Show source code in pypeln/thread/api.py 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 def filter ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Filter ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"filter()"},{"location":"api/thread/#pypeln.thread.api.flat_map","text":"Show source code in pypeln/thread/api.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 def flat_map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.thread.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.thread.map` and `pypeln.thread.filter` with it, for example: ```python import pypeln as pl pl.thread.map(f, stage) = pl.thread.flat_map(lambda x: [f(x)], stage) pl.thread.filter(f, stage) = pl.thread.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return FlatMap ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data, however unlike pypeln.thread.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.thread.map and pypeln.thread.filter with it, for example: import pypeln as pl pl . thread . map ( f , stage ) = pl . thread . flat_map ( lambda x : [ f ( x )], stage ) pl . thread . filter ( f , stage ) = pl . thread . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters Name Type Description Default f Callable A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"flat_map()"},{"location":"api/thread/#pypeln.thread.api.from_iterable","text":"Show source code in pypeln/thread/api.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def from_iterable ( iterable : typing . Iterable = pypeln_utils . UNDEFINED , maxsize : int = None , worker_constructor : typing . Type = Thread , ) -> Stage : \"\"\" Creates a stage from an iterable. This function gives you more control of how a stage is created through the `worker_constructor` parameter which can be either: * `threading.Thread`: (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. * `multiprocessing.Process`: is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Arguments: iterable: a source iterable. maxsize: this parameter is not used and only kept for API compatibility with the other modules. worker_constructor: defines the worker type for the producer stage. Returns: If the `iterable` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( iterable ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , maxsize = None , worker_constructor = worker_constructor ) ) return FromIterable ( iterable = iterable , f = None , worker_constructor = worker_constructor , workers = 1 , maxsize = 0 , timeout = 0 , on_start = None , on_done = None , dependencies = [], ) Creates a stage from an iterable. This function gives you more control of how a stage is created through the worker_constructor parameter which can be either: threading.Thread : (default) is efficient for iterables that already have the data in memory like lists or numpy arrays because threads can share memory so no serialization is needed. multiprocessing.Process : is efficient for iterables who's data is not in memory like arbitrary generators and benefit from escaping the GIL. This is inefficient for iterables which have data in memory because they have to be serialized when sent to the background process. Parameters Name Type Description Default iterable Iterable a source iterable. Undefined maxsize int this parameter is not used and only kept for API compatibility with the other modules. None worker_constructor Type defines the worker type for the producer stage. <class 'threading.Thread'> Returns Type Description Stage If the iterable parameters is given then this function returns a new stage, else it returns a Partial .","title":"from_iterable()"},{"location":"api/thread/#pypeln.thread.api.map","text":"Show source code in pypeln/thread/api.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 def map ( f : typing . Callable , stage : Stage = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : typing . Callable = None , on_done : typing . Callable = None , ) -> Stage : \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A stage or iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.async_raise` which has some limitations for stoping threads. Returns: If the `stage` parameters is given then this function returns a new stage, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage ) return Map ( f = f , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , dependencies = [ stage ], ) Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters Name Type Description Default f Callable A function with the signature f(x) -> y . f can accept additional arguments by name as described in Advanced Usage . required stage Stage A stage or iterable. Undefined workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.async_raise which has some limitations for stoping threads. Returns Type Description Stage If the stage parameters is given then this function returns a new stage, else it returns a Partial .","title":"map()"},{"location":"api/thread/#pypeln.thread.api.ordered","text":"Show source code in pypeln/thread/api.py 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 def ordered ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 ) -> Stage : \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.thread.map(slow_squared, stage, workers = 2) stage = pl.thread.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : ordered ( stage , maxsize = maxsize )) stage = to_stage ( stage ) return Ordered ( f = None , workers = 1 , maxsize = maxsize , timeout = 0 , on_start = None , on_done = None , dependencies = [ stage ], ) Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . thread . map ( slow_squared , stage , workers = 2 ) stage = pl . thread . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Stage If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"ordered()"},{"location":"api/thread/#pypeln.thread.api.run","text":"Show source code in pypeln/thread/api.py 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 def run ( stages : typing . List [ Stage ], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.thread.each(slow_fn, data, workers=6) # execute pipeline pl.thread.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if isinstance ( stages , list ) and len ( stages ) == 0 : raise ValueError ( \"Expected at least 1 stage to run\" ) elif isinstance ( stages , list ): stage = concat ( stages , maxsize = maxsize ) else : stage = stages stage = to_iterable ( stage , maxsize = maxsize ) for _ in stages : pass Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . thread . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . thread . run ( stage ) Parameters Name Type Description Default stages List[pypeln.thread.stage.Stage] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0","title":"run()"},{"location":"api/thread/#pypeln.thread.api.to_iterable","text":"Show source code in pypeln/thread/api.py 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 def to_iterable ( stage : Stage = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False ) -> typing . Iterable : \"\"\" Creates an iterable from a stage. Arguments: stage: A stage object. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if pypeln_utils . is_undefined ( stage ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable Creates an iterable from a stage. Parameters Name Type Description Default stage Stage A stage object. Undefined maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns Type Description Iterable If the stage parameters is given then this function returns an iterable, else it returns a Partial .","title":"to_iterable()"}]}